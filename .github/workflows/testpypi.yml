name: Publish the package to TestPyPI

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  env_prep:
    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.set-env.outputs.env }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Read JSON file
        id: set-env
        shell: bash
        run: |
          JSON=$(cat .github/workflows/env.json)
          echo 'env<<EOF' >> $GITHUB_OUTPUT
          echo "${JSON}" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

  deploy:
    needs: env_prep
    env: ${{ fromJson(needs.env_prep.outputs.env) }}

    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Read the Python version from the file
      id: python-version
      uses: juliangruber/read-file-action@v1
      with:
        path: .github/python-version.txt
        trim: true

    - name: Set up Python
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ steps.python-version.outputs.content }}

    - name: Load cached Poetry installation
      id: cached-poetry
      uses: actions/cache@v3
      with:
        path: ${{ env.poetry_cache_paths }}
        key: ${{ format(env.poetry_cache_key_fmt, env.poetry_version, runner.os, steps.setup-python.outputs.python-version) }}

    - name: Install Poetry
      if: steps.cached-poetry.outputs.cache-hit != 'true'
      shell: bash
      env:
        POETRY_VERSION: ${{ env.poetry_version }}
        POETRY_HOME: ${{ env.poetry_home }}
      run: |
        curl -sSL https://install.python-poetry.org | python3 -

    - name: Add Poetry to the PATH environment variable
      if: env.poetry_path != ''
      shell: bash
      run: |
        echo "${{ env.poetry_path }}" >> $GITHUB_PATH

    - name: Configure Poetry
      env:
        TESTPYPI_API_TOKEN: ${{ secrets.TESTPYPI_API_TOKEN }}
      run: |
        poetry config virtualenvs.in-project true
        poetry config repositories.test-pypi https://test.pypi.org/legacy/
        poetry config pypi-token.test-pypi $TESTPYPI_API_TOKEN

    - name: Install dependencies
      run: |
        poetry self add 'poetry-dynamic-versioning[plugin]'

    - name: Build
      run: |
        poetry build

    - name: Publish
      run: |
        poetry publish -r test-pypi

  docs:
    if: true # true if documentation is needed.
    needs: deploy
    permissions:
      contents: read
      pages: write
      id-token: write
    uses: ./.github/workflows/docs.yml
