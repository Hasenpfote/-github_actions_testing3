name: Poetry caching feature

on: workflow_dispatch

permissions:
  contents: read

jobs:
  matrix_prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Read JSON file
        id: set-matrix
        shell: bash
        run: |
          JSON=$(cat .github/workflows/test_matrix.json)
          echo 'matrix<<EOF' >> $GITHUB_OUTPUT
          echo "${JSON}" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

  create-cache:
    needs: matrix_prep
    name: caching 1/2 - ${{ matrix.os }}, ${{ matrix.python-version }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Poetry ${{ matrix.poetry_version }}
        id: setup-poetry
        uses: ./.github/actions/setup-poetry
        with:
          cache-path: ${{ matrix.poetry_cache_paths }}
          cache-key: pcf-${{ format(matrix.poetry_cache_key_fmt, matrix.poetry_version, matrix.os, matrix.python-version) }}
          poetry-version: ${{ matrix.poetry_version }}
          poetry-home: ${{ matrix.poetry_home }}
          poetry-path: ${{ matrix.poetry_path }}

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project true
      - name: Set up Poetry dependencies
        id: setup-poetry-dependencies
        uses: ./.github/actions/setup-poetry-dependencies
        with:
          cache-path: .venv
          cache-key: pcf-${{ format(matrix.venv_cache_key_fmt, matrix.os, matrix.python-version, hashFiles('**/poetry.lock')) }}
          python-version: ${{ matrix.python-version }}
          poetry-install-args: --no-interaction --no-root --with dev

      - name: Test with pytest
        run: |
          poetry run tox -e py

  # Same as above.
  load-cache:
    needs: [matrix_prep, create-cache]
    name: caching 2/2 - ${{ matrix.os }}, ${{ matrix.python-version }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Poetry ${{ matrix.poetry_version }}
        id: setup-poetry
        uses: ./.github/actions/setup-poetry
        with:
          cache-path: ${{ matrix.poetry_cache_paths }}
          cache-key: pcf-${{ format(matrix.poetry_cache_key_fmt, matrix.poetry_version, matrix.os, matrix.python-version) }}
          #poetry-version: ${{ matrix.poetry_version }}
          #poetry-home: ${{ matrix.poetry_home }}
          #poetry-path: ${{ matrix.poetry_path }}

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project true

      - name: Set up Poetry dependencies
        id: setup-poetry-dependencies
        uses: ./.github/actions/setup-poetry-dependencies
        with:
          cache-path: .venv
          cache-key: pcf-${{ format(matrix.venv_cache_key_fmt, matrix.os, matrix.python-version, hashFiles('**/poetry.lock')) }}
          #python-version: ${{ matrix.python-version }}
          #poetry-install-args: --no-interaction --no-root --with dev

      - name: Test with pytest
        run: |
          poetry run tox -e py
