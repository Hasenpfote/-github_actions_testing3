name: Debug5

on: workflow_dispatch

permissions:
  contents: read

jobs:
  matrix_prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.read-file.outputs.content }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Read JSON file
        id: read-file
        uses: ./.github/actions/read-file
        with:
          path: .github/workflows/test_matrix.json

  create-cache:
    needs: matrix_prep
    name: caching 1/2 - ${{ matrix.os }}, ${{ matrix.python-version }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Poetry ${{ matrix.poetry-version }}
        id: setup-poetry
        uses: ./.github/actions/setup-poetry
        with:
          cache-path: ${{ matrix.poetry-cache-paths }}
          cache-key: temp-5-${{ format(matrix.poetry-cache-key-fmt, matrix.poetry-version, matrix.os, steps.setup-python.outputs.python-version) }}
          poetry-version: ${{ matrix.poetry-version }}
          poetry-home: ${{ matrix.poetry-home }}
          poetry-path: ${{ matrix.poetry-path }}

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project true

      ###
      - name: Debug
        id: venv
        shell: bash
        run: |
          poetry config virtualenvs.in-project
          if [ $(poetry config virtualenvs.in-project) == 'true' ]; then
            echo 'path=.venv' >> $GITHUB_OUTPUT
          else
            #/home/runner/.cache/pypoetry/virtualenvs
            echo "path=$(poetry config virtualenvs.path)" >> $GITHUB_OUTPUT
          fi

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.venv.outputs.path }}
          key: temp-5-${{ format(matrix.venv-cache-key-fmt, matrix.os, steps.setup-python.outputs.python-version, hashFiles('**/poetry.lock')) }}

      - name: Set the environment used by Poetry on Windows 1/2
        if: runner.os == 'Windows'
        id: py
        shell: bash
        run: |
          VER='${{ steps.setup-python.outputs.python-version }}'
          ARR=(${VER//./ })
          echo "tag=${ARR[0]}.${ARR[1]}" >> $GITHUB_OUTPUT

      - name: Set the environment used by Poetry on Windows 2/2
        if: runner.os == 'Windows'
        shell: bash
        env:
          PY_PYTHON: ${{ steps.py.outputs.tag }}
        run: |
          poetry env use py

      - name: Install dependencies
        shell: bash
        run: |
          poetry install --no-interaction --no-root --with dev

      - name: Debug
        shell: bash
        run: |
          poetry env info
      ###

      #- name: Set up Poetry dependencies
      #  id: setup-poetry-dependencies
      #  uses: ./.github/actions/setup-poetry-dependencies
      #  with:
      #    cache-path: .venv
      #    cache-key: temp-5-${{ format(matrix.venv-cache-key-fmt, matrix.os, steps.setup-python.outputs.python-version, hashFiles('**/poetry.lock')) }}
      #    python-version: ${{ steps.setup-python.outputs.python-version }}
      #    poetry-install-args: --no-interaction --no-root --with dev

      - name: Debug
        shell: bash
        run: |
          echo "VENV_PATH=$(poetry env info --path)" >> $GITHUB_ENV

      - name: Debug
        shell: bash
        run: |
          echo ${VENV_PATH}
          poetry config --list
          poetry config virtualenvs.path
          poetry env info 
          poetry env info --path

      - name: Debug
        shell: bash
        run: |
          if [ "$RUNNER_OS" == 'Windows' ]; then
            echo "VENV_ACTIVATE=. .venv\Scripts\activate" >> $GITHUB_ENV
            #echo "VENV_ACTIVATE=. ${VENV_PATH}\Scripts\activate" >> $GITHUB_ENV
          else
            #echo "VENV_ACTIVATE=. .venv/bin/activate" >> $GITHUB_ENV
            echo "VENV_ACTIVATE=. ${VENV_PATH}/bin/activate" >> $GITHUB_ENV
          fi

      - name: Test with pytest
        run: |
          ${{ env.VENV_ACTIVATE }}
          tox -e py -- -v --color=yes
          deactivate
