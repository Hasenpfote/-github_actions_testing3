# Workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

# build the documentation whenever there are new commits on main
on:
  workflow_dispatch:
  workflow_call:

# security: restrict permissions for CI jobs.
permissions:
  contents: read

jobs:
  env_prep:
    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.set-env.outputs.env }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Read JSON file
        id: set-env
        shell: bash
        run: |
          JSON=$(cat .github/workflows/env.json)
          echo 'env<<EOF' >> $GITHUB_OUTPUT
          echo "${JSON}" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

  # Build the documentation and upload the static HTML files as an artifact.
  build:
    needs: env_prep
    env: ${{ fromJson(needs.env_prep.outputs.env) }}

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Read the Python version from the file
        id: python-version
        uses: juliangruber/read-file-action@v1
        with:
          path: .github/python-version.txt
          trim: true

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ steps.python-version.outputs.content }}

      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v3
        with:
          path: ${{ env.poetry_cache_paths }}
          key: poetry-${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}

      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        shell: bash
        env:
          POETRY_HOME: ${{ env.poetry_home }}
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Add Poetry to the PATH environment variable
        if: env.poetry_path != ''
        shell: bash
        run: |
          echo "${{ env.poetry_path }}" >> $GITHUB_PATH

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project true

      - name: Install dependencies
        run: poetry install --no-interaction --only docs
  
      - name: Install project
        run: poetry install --no-interaction --only-root        

      - name: Build
        run: |
          poetry run python ./docs/make.py

      - uses: actions/upload-pages-artifact@v1
        with:
          path: docs/build/

  # Deploy the artifact to GitHub pages.
  # This is a separate job so that only actions/deploy-pages has the necessary permissions.
  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v1
