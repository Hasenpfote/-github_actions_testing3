name: Lint

on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/lint.yml'
      - 'src/**'
      - 'tests/**'
      - 'docs/make.py'
      - 'poetry.lock'
      - 'pyproject.toml'
      - 'tox.ini'
  pull_request:
    paths:
      - '.github/workflows/lint.yml'
      - 'src/**'
      - 'tests/**'
      - 'docs/make.py'
      - 'poetry.lock'
      - 'pyproject.toml'
      - 'tox.ini'

permissions:
  contents: read

jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
      - name: Debug
        shell: bash
        run: |
          which yq
          yq --help
      - name: Checkout
        uses: actions/checkout@v3
      - name: Debug yq 1/3
        id: yq1
        shell: bash
        run: |
          #cat .github/temp.yml | yq '.default'
          CONTENT="$(cat .github/temp.yml | yq '.default')"
          echo 'content<<EOF' >> $GITHUB_OUTPUT
          echo "${CONTENT}" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
      - name: Debug yq 2/3
        shell: bash
        run: |
          echo "${{ steps.yq1.outputs.content }}"
      - name: Debug yq 3/3
        shell: bash
        #env: ${{ fromJson(steps.yq1.outputs.content) }}
        env: ${{ steps.yq1.outputs.content }}
        run: |
          printenv

      - name: Run read-yaml action
        id: yaml-data
        uses: jbutcher5/read-yaml@main
        with:
          file: '.github/temp.yml'
          #key-path: '["default"]'
          key-path: '["case-1"]'
      - name: Debug
        shell: bash
        run: |
          echo "${{ steps.yaml-data.outputs.data }}"
      - name: Debug
        shell: bash
        run: |
          echo "${{ fromJson(steps.yaml-data.outputs.data) }}"
      - name: Debug
        shell: bash
        env: ${{ fromJson(steps.yaml-data.outputs.data) }}
        run: |
          printenv

  env_prep:
    if: |
      github.event_name != 'pull_request' ||
      github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name

    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.read-file.outputs.content }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Read JSON file
        id: read-file
        uses: ./.github/actions/read-file
        with:
          path: .github/workflows/env.json

  build:
    needs: env_prep
    env: ${{ fromJson(needs.env_prep.outputs.env) }}

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python ${{ env.python-version }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.python-version }}

      - name: Set up Poetry ${{ env.poetry-version }}
        id: setup-poetry
        uses: ./.github/actions/setup-poetry
        with:
          cache-path: ${{ env.poetry-cache-paths }}
          cache-key: ${{ format(env.poetry-cache-key-fmt, env.poetry-version, runner.os, steps.setup-python.outputs.python-version) }}
          poetry-version: ${{ env.poetry-version }}
          poetry-home: ${{ env.poetry-home }}
          poetry-path: ${{ env.poetry-path }}

      - name: Set up Poetry dependencies
        id: setup-poetry-dependencies
        uses: ./.github/actions/setup-poetry-dependencies
        with:
          cache-key: ${{ format(env.venv-cache-key-fmt, runner.os, steps.setup-python.outputs.python-version, hashFiles('**/poetry.lock')) }}
          python-version: ${{ steps.setup-python.outputs.python-version }}
          poetry-install-args: --no-interaction --no-root --with dev

      - name: Lint with tox
        run: |
          poetry run tox -e black,isort,flake8,mypy -p all -q
