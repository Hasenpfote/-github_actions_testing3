name: Lint2

#on: [ push, pull_request ]
on: workflow_dispatch

permissions:
  contents: read

jobs:
  build:
    env:
      POETRY_HOME: ''
      POETRY_PATH: ''
      POETRY_CACHE_PATHS: |
        ~/.local/share/pypoetry
        ~/.local/bin/poetry
  
    strategy:
      matrix:
        include:
          - poetry_home: ''
            poetry_path: ''
            poetry_cache_paths: |
              ~/.local/share/pypoetry
              ~/.local/bin/poetry

    runs-on: ubuntu-latest
    name: build # (${{ jobs.build.runs-on }})

    steps:
      - name: Debug
        shell: bash
        run: |
          echo -e ${POETRY_CACHE_PATHS}

      - name: Checkout
        uses: actions/checkout@v3

      - name: Read version
        id: python-version
        uses: juliangruber/read-file-action@v1
        with:
          path: .github/python-version.txt
          trim: true

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ steps.python-version.outputs.content }}

      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v3
        with:
          path: ${{ env.POETRY_CACHE_PATHS }}
          key: poetry-${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}

      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        shell: bash
        #env:
        #  POETRY_HOME: ${{ matrix.poetry_home }}
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Add Poetry to the PATH environment variable
        if: env.POETRY_PATH != ''
        shell: bash
        run: |
          echo "${POETRY_PATH}" >> $GITHUB_PATH

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --only dev

      - name: Install project
        run: poetry install --no-interaction --only-root
      - name: Lint with tox
        run: |
          poetry run tox -e black,isort,flake8,mypy -p all -q
