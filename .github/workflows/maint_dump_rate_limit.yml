name: '🧰 Maint: Dump rate limit'

on:
  workflow_dispatch:

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - name: Dump rate limit 
        uses: actions/github-script@v6
        with:
          script: |
            const indicator = (function () {
              const max_steps = 5;
              const threshold_to_emoji = {25: '🟥', 50: '🟨', 100: '🟩'};
              const keys = Object.keys(threshold_to_emoji);
              const scale = (max_steps - 1) / 100;

              return function (value) {
                let arr = new Array(max_steps).fill('🟫');
                if (value <= 0) return arr.join('');

                let emoji;
                for (let key of keys) {
                  if (value <= key) {
                      emoji = threshold_to_emoji[key];
                      break;
                  }
                }
                return arr.fill(emoji, 0, Math.floor(value * scale) + 1).join('');
              }
            })();

            const current_date = new Date();
            const rate_limit = await github.request('GET /rate_limit', {});

            const table = [];
            const header = Object.keys(rate_limit.data.rate).map(v => ({data: v, header: true}));
            header.push({data: 'Time until reset in minutes', header: true});
            header.push({data: '', header: true});
            header.unshift({data: 'resource', header: true});
            table.push(header);

            for (let [key, value] of Object.entries(rate_limit.data.resources).sort()) {
              const resource = Object.values(value).map(v => v.toString());
              const reset = new Date(value.reset * 1000);
              const time_left = Math.floor((reset - current_date) / 60000);
              resource.push(value.used > 0 ? time_left.toString() : '');
              resource.push(indicator(Math.floor((value.remaining / value.limit) * 100)));
              const prefix = value.remaining < value.limit * 0.5 ? '⚠️' : '';
              resource.unshift(`${prefix} ${key}`);
              table.push(resource);
            }

            await core.summary
              .addHeading('rate_limit')
              .addTable(table)
              .addEOL()
              .addRaw('Created at ' + new Date().toString())
              .write()
