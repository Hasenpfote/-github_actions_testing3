name: Lab3

on: workflow_dispatch

permissions:
  contents: read

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        #python-version: ['3.7', '3.8']
        #os: [ubuntu-20.04, macos-latest, windows-latest]
        python-version: ['3.7', ]
        os: [windows-latest, ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Load cached Poetry installation
        # On Windows, using poetry restored from the cache causes several problems.
        id: cached-poetry
        uses: actions/cache@v3
        with:
          #path: ~/.local # the path depends on the OS
          path: "C:\\Users\\runneradmin\\.local"
          key: lab3-poetry-${{ matrix.os }}-python-${{ matrix.python-version }}

      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        #uses: snok/install-poetry@v1
        run: |
          (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | POETRY_HOME="C:\Users\runneradmin\.local" py -
        shell: pwsh

      #- name: Restore PATH variable
      #  if: steps.cached-poetry.outputs.cache-hit == 'true' && runner.os != 'Linux'
      #  run: |
      #    echo "$HOME/.local/bin" >> $GITHUB_PATH

      #- name: Add a path with cmd
      #  if: runner.os == 'Windows'
      #  run: echo "C:\\Users\\runneradmin\\.local\\bin" >> $GITHUB_PATH
      #  shell: cmd

      - name: Add a path with pwsh
        if: runner.os == 'Windows'
        run: Add-Content $env:GITHUB_PATH "$env:USERPROFILE\.local\bin"
        shell: pwsh

      - name: Debug
        run: |
          poetry --version

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: lab3-venv-${{ matrix.os }}-python-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --with dev
      - name: Install project
        run: poetry install --no-interaction --only-root

      - name: Get the environment name for Tox
        id: vars
        run: |
          import os
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
              value = str(${{ matrix.python-version }}).replace('.', '')
              print(f'env=py{value}', file=fh)
        shell: python

      - name: Test with pytest
        run: |
          #poetry run tox -e py # This is not possible on Windows.
          poetry run tox -e ${{ steps.vars.outputs.env }}
