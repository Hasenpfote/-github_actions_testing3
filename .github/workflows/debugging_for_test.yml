name: Debugging for Test

on: workflow_dispatch

permissions:
  contents: read

jobs:
  job1:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
    
      - id: set-matrix
        run: |
          JSON=$(cat .github/workflows/test.json)
          echo "::set-output name=matrix::${JSON//'%'/'%25'}"

  build:
    needs: job1
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.job1.outputs.matrix)}}

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v3
        with:
          path: ${{ matrix.poetry_cache_paths }}
          key: d-poetry-${{ matrix.os }}-python-${{ matrix.python-version }}

      - name: Install Poetry for Linux/macOS
        if: runner.os != 'Windows' && steps.cached-poetry.outputs.cache-hit != 'true'
        shell: bash
        env:
          POETRY_HOME: ${{ matrix.poetry_home }}
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Install Poetry for Windows
        if: runner.os == 'Windows' && steps.cached-poetry.outputs.cache-hit != 'true'
        shell: pwsh
        env:
          POETRY_HOME: ${{ matrix.poetry_home }}
        run: |
          (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | py -

      - name: Add Poetry to the PATH environment variable
        if: matrix.poetry_path != ''
        shell: bash
        run: |
          echo "${{ matrix.poetry_path }}" >> $GITHUB_PATH
  
      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: d-venv-${{ matrix.os }}-python-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --with dev

      - name: Install project
        run: poetry install --no-interaction --only-root

      - name: Get the environment name for Tox
        id: vars
        shell: python
        run: |
          import os
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
              value = ''.join(str(${{ matrix.python-version }}).split('.', 2)[0:2])
              print(f'env=py{value}', file=fh)

      - name: Test with pytest
        run: |
          #poetry run tox -e py # This is not possible on Windows.
          poetry run tox -e ${{ steps.vars.outputs.env }}
